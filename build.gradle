plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'maven-publish'
    id 'eclipse'
}

import groovy.json.JsonSlurper
import java.text.SimpleDateFormat

group = 'com.github.GhettiGuru'

// Base version
def baseVersion = '0.3'
def ghUsername = System.getenv("GH_USERNAME")
def ghToken = System.getenv("GH_TOKEN")
def repoName = 'bee-encode'

// Function to check if version exists in GitHub Packages
def versionExists(version) {
    if (!ghToken) return false
    try {
        def apiUrl = "https://api.github.com/orgs/${ghUsername}/packages/maven/${repoName}/versions"
        def connection = new URL(apiUrl).openConnection()
        connection.setRequestProperty("Authorization", "token ${ghToken}")
        connection.setRequestProperty("Accept", "application/vnd.github.v3+json")
        def response = new JsonSlurper().parse(connection.inputStream)
        return response.any { it.name == version }
    } catch(Exception e) {
        println "Warning: Could not check GitHub Packages: ${e.message}"
        return false
    }
}

// Set project version: append timestamp if base version exists
def finalVersion = baseVersion
if (versionExists(baseVersion)) {
    def timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
    finalVersion = "${baseVersion}-${timestamp}"
    println "Version ${baseVersion} already exists. Using new version: ${finalVersion}"
} else {
    println "Using version: ${finalVersion}"
}

version = finalVersion

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    mavenLocal()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testImplementation "junit:junit:4.+"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = 'com.github.GhettiGuru'
            artifactId = repoName
            version = project.version
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${ghUsername}/${repoName}")
            credentials {
                username = ghUsername
                password = ghToken
            }
        }
    }
}

// Ensure publishing only runs if GH_TOKEN exists
tasks.named('publishMavenJavaPublicationToGitHubPackagesRepository') {
    onlyIf { ghToken != null }
}
